{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["PhonebookAdd","state","name","number","handleSubmit","e","preventDefault","props","onSubmit","setState","handleChange","currentTarget","value","className","this","onChange","type","pattern","title","required","Component","Contacts","contacts","onDeleteContact","map","id","onClick","Filter","App","filter","addContact","contact","uuidv4","contactFind","find","undefined","alert","deleteContact","contactId","prevState","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","visibleContacts","ContactForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b4a9304.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PhonebookAdd extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit([this.state.name, this.state.number]);\n\n    this.setState({ name: '' });\n    this.setState({ number: '' });\n  };\n  handleChange = e => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <form className=\"phonebookAdd\" onSubmit={this.handleSubmit}>\n        <label className=\"phonebookAdd-label\">\n          Name\n          <input\n            value={this.state.name}\n            onChange={this.handleChange}\n            type=\"text\"\n            name=\"name\"\n            className=\"phonebookAdd-input\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"phonebookAdd-label\">\n          Number\n          <input\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            className=\"phonebookAdd-input\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"TodoEditor__button\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default PhonebookAdd;\n","import PropTypes from 'prop-types';\nexport default function Contacts({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"contact-list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contacts-item\">\n          <span className=\"contacts-item-name\">{name}:</span>\n          <span className=\"contacts-item-name\">{number}</span>\n          <button\n            type=\"button\"\n            className=\"TodoList__btn\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\nContacts.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nexport default function Filter({ value, onChange }) {\n  return (\n    <label className=\"filter-label\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className=\"filter-input\"\n      />\n    </label>\n  );\n}\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = ([name, number]) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    const contacts = this.state.contacts;\n    const contactFind = contacts.find(contact => contact.name === name);\n    if (contactFind !== undefined) {\n      return alert(`${name} is already in contacts.`);\n    }\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h2 className=\"phonebook-title\">Phonebook</h2>\n        <ContactForm onSubmit={this.addContact} onChange={this.changeFilter} />\n\n        <h3 className=\"phonebook-title\">Contacts</h3>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}